var Flowcell=function(t){t=t||{},this.lanes=[]
for(var e=1;e<=parseInt(t.lanes,10);e++)this.lanes.push(new Lane({number:e}))
this.height=t.height||800,this.width=this.height/4,this.margin=parseInt(t.margin,10)||10,this.padding=parseInt(t.padding,10)||5,this.laneGap=parseInt(t.laneGap,10)||2,this.padding>=20&&t.annotations&&(this.annotations=!0,this.annotationColor=t.annotationColor||"white"),this.laneWidth=(this.width-2*this.padding-2*this.margin-(this.lanes.length-1)*this.laneGap)/this.lanes.length}
Flowcell.prototype.render=function(){var t=this,e=$('<svg xmlns="http://www.w3.org/2000/svg" class="flowcell">').attr("width",this.width).attr("height",this.height),i=$("<g>")
return i.append($("<rect>").attr("width",this.width-2*this.margin).attr("height",this.height-2*this.margin).attr("x",this.margin).attr("y",this.margin).attr("stroke","black").attr("fill",this.backgroundColor).attr("class","fc_surface")),this.lanes.forEach(function(e,r){var s={width:t.laneWidth,height:t.height-2*t.padding-2*t.margin,xoffset:t.padding+t.margin+r*t.laneWidth+r*t.laneGap,yoffset:t.padding+t.margin}
i.append(e.render(s)),t.annotations&&i.append($("<text>").attr("fill",t.annotationColor).attr("y",t.margin/2+t.padding).attr("x",t.margin+t.padding+r*t.laneWidth+r*t.laneGap+t.laneWidth/4).attr("class","annotation").text(e.number.toString()))}),e.append(i),e[0].outerHTML}
var Microplate=function(t){var e=1800
t=t||{},this.rows=parseInt(t.rows,10)||8,this.columns=parseInt(t.columns,10)||12,["rows","columns"].forEach(function(t){this[t]>702&&(this[t]=702)}),this.shape=["square","rounded","circle"].indexOf(t.shape)!==-1?t.shape:"circle",this.rowIteratorType=["letter","number"].indexOf(t.rowIterator)!==-1?t.rowIterator:"letter",this.colIteratorType=["letter","number"].indexOf(t.colIterator)!==-1?t.rowIterator:"number",this.wellShape=t.wellShape||"square",this.wellGap=parseInt(t.wellGap,5)||5,this.margin=parseInt(t.margin,10)||10,this.padding=parseInt(t.padding,10)||10,this.padding>=20&&t.annotations&&(this.annotations=!0),this.width=parseInt(t.width,10)||1e3,this.width=this.width>e?e:this.width,this.segmentSize=(this.width-2*this.padding-2*this.margin-this.columns*this.wellGap)/this.columns,this.height=this.segmentSize*this.rows+this.rows*this.wellGap+2*this.margin+2*this.padding,this.wells=[],this.buildWells(),this.attributes=t.attributes&&"object"==typeof t.attributes&&"null"!=typeof t.attributes?t.attributes:{class:"plate"},!Object.keys(this.attributes).indexOf("class")===-1&&(this.attributes.class="plate"),Object.defineProperty(this,"wellList",{get:function(){var t=[]
return this.wells.forEach(function(e){e.forEach(function(e){t.push(e)})}),t}})}
Microplate.prototype.buildWells=function(){for(var t=0;t<this.rows;t++){this.wells[t]=[]
for(var e=0;e<this.columns;e++)this.wells[t][e]=new Well(this.getIterator(this.rowIteratorType).apply(this,[t,this.rows]),this.getIterator(this.colIteratorType).apply(this,[e,this.columns]),t+t*(this.columns-1)+e,{shape:this.wellShape,padding:this.wellGap,color:this.wellColor})}},Microplate.prototype.getIterator=function(t){switch(t){case"letter":return this.LetterIterator
case"number":return this.NumberIterator
default:return this.NumberIterator}},Microplate.prototype.getWellByCoordinate=function(t){return this.wellList.filter(function(e){return e.coordinate.toLowerCase()===t.toLowerCase()})[0]},Microplate.prototype.getWellsByCoordinateRange=function(t){var e=this,i=t.split(":")
if(2!==i.length)return[]
i=i.map(function(t){return e.getWellByCoordinate(t).index}).sort(function(t,e){return t-e})
for(var r=[],s=i[0];s<=i[1];s++)r.push(this.getWellByIndex(s))
return r},Microplate.prototype.getWellsByCoordinates=function(t){var e=this
if(!Array.isArray(t))return[]
var i=[]
return t.forEach(function(t){var r=e.getWellByCoordinate(t)
r&&i.push(r)}),i},Microplate.prototype.getWellByIndex=function(t,e){if(t=parseInt(t,10),e&&(t-=1),t&&!(t<0))return this.wellList.filter(function(e){return e.index===t})[0]},Microplate.prototype.LetterIterator=function(t){for(var e="";t>=26;){var i=Math.floor(t/26)-1
e+=String.fromCharCode(i+65),t-=26*(i+1)}return e+=String.fromCharCode(t+65)},Microplate.prototype.NumberIterator=function(t,e){return this.zeroPad(t+1,e.toString().length)},Microplate.prototype.zeroPad=function(t,e){return t+="",t.length>=e?t:new Array(e-t.length+1).join("0")+t},Microplate.prototype.render=function(){var t=this,e=$('<svg xmlns="http://www.w3.org/2000/svg" class="microplate">').attr("width",this.width).attr("height",this.height)
Object.keys(this.attributes).forEach(function(i){e.attr(i,t.attributes[i])})
var i=$("<g>"),r=$("<rect>").attr("width",this.width-2*this.margin).attr("height",this.height-2*this.margin).attr("x",this.margin).attr("y",this.margin).attr("class","plate")
i.append(r)
for(var s=0;s<this.rows;s++){this.annotations&&i.append($("<text>").attr("fill",this.annotationColor).attr("y",this.segmentSize*s+this.wellGap*s+this.margin+this.padding+this.segmentSize/1.8).attr("x",this.padding/1.6).attr("class","annotation").text(this.wells[s][0].row))
for(var a=0;a<this.columns;a++){0===s&&this.annotations&&i.append($("<text>").attr("fill",this.annotationColor).attr("x",this.segmentSize*a+this.wellGap*a+this.margin+this.padding+this.segmentSize/2.6).attr("y",this.padding).attr("class","annotation").text(this.wells[0][a].col))
var n={xoffset:this.segmentSize*a+this.margin+this.padding+this.wellGap*a,yoffset:this.segmentSize*s+this.margin+this.padding+this.wellGap*s,size:this.segmentSize}
i.append(this.wells[s][a].render(n))}}return e.append(i),e[0].outerHTML}
var Well=function(t,e,i,r){switch(r=r||{},this.row=t,this.col=e,this.index=i,this.maxVolume=parseInt(r.maxVolume,10),this.volume=parseInt(r.volume,10),this.padding=parseInt(r.padding,10)||5,this.color=r.color||"white",r.shape){case"circle":this.shape="circle"
break
case"rounded":this.shape="rounded"
break
default:this.shape="square"}Object.defineProperty(this,"coordinate",{get:function(){return[this.row,this.col].every(function(t){return parseInt(t,10)})?this.row+","+this.col:this.row+this.col}}),Object.defineProperty(this,"empty",{get:function(){return!this.volume}}),Object.defineProperty(this,"full",{get:function(){return this.volume===this.maxVolume}})}
Well.prototype.removeVol=function(t){this.volume-=t,this.volume<0&&(this.volume=0)},Well.prototype.addVol=function(t){this.volume+=t,this.volume>this.maxVolume&&(this.volume=this.maxVolume)},Well.prototype.render=function(t){switch(this.shape){case"rounded":var e=.05*t.size,i=t.size
return $("<rect>").attr("rx",e).attr("ry",e).attr("width",i).attr("height",i).attr("x",t.xoffset).attr("y",t.yoffset).attr("fill",this.color).attr("stroke","black").attr("class","well")
case"circle":var e=t.size/2
return $("<circle>").attr("r",e).attr("cx",t.xoffset+e).attr("cy",t.yoffset+e).attr("fill",this.color).attr("stroke","black").attr("class","well")
default:var e=.05*t.size,i=t.size
return $("<rect>").attr("width",i).attr("height",i).attr("x",t.xoffset).attr("y",t.yoffset).attr("fill",this.color).attr("stroke","black").attr("class","well")}}
var Lane=function(t){t=t||{},this.number=parseInt(t.number,10),this.clusters=parseInt(t.clusters,10)||0,this.maxClusters=parseInt(t.maxClusters,10)||!1,this.surfaces=parseInt(t.surfaces,10)||!1,this.tiles=parseInt(t.tiles,10)||!1,this.swaths=parseInt(t.swaths,10)||!1,this.color=t.color||"white",Object.defineProperty(this,"overClustered",{get:function(){return!!this.maxClusters&&this.clusters>this.maxClusters}}),Object.defineProperty(this,"percentFull",{get:function(){return this.maxClusters&&this.clusters?this.overClustered?1:this.clusters/this.maxClusters:0}}),Object.defineProperty(this,"totalTiles",{get:function(){return!(!this.surfaces||!this.tiles)&&this.surfaces*this.tiles*this.swaths}})}
Lane.prototype.render=function(t){return $("<rect>").attr("width",t.width).attr("height",t.height).attr("x",t.xoffset).attr("y",t.yoffset).attr("stroke","black").attr("fill",this.color).attr("class","lane")}
